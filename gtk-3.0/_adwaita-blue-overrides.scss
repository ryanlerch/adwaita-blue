$base_color: if($variant == 'light', #ffffff, #232729);
$text_color: if($variant == 'light', black, white);
$bg_color: if($variant == 'light', #e8e8e7, darken(#4a90d9, 20%));
$fg_color: if($variant == 'light', #2e3436, #eeeeec);

$selected_fg_color: #ffffff;
$selected_bg_color: if($variant == 'light', #4a90d9, darken(#4a90d9, 20%));
$selected_borders_color: if($variant== 'light', darken($selected_bg_color, 30%), darken($selected_bg_color, 20%));
$borders_color: if($variant == 'light', darken($bg_color, 20%), darken($bg_color, 10%));
$alt_borders_color: if($variant == 'light', darken($bg_color, 35%), darken($bg_color, 17%));
$borders_edge: if($variant == 'light', transparentize(white, 0.2), transparentize($fg_color, 0.93));
$link_color: if($variant == 'light', darken($selected_bg_color, 10%), lighten($selected_bg_color, 20%));
$link_visited_color: if($variant == 'light', darken($selected_bg_color, 20%), lighten($selected_bg_color, 10%));
$top_hilight: $borders_edge;
$dark_fill: mix($borders_color, $bg_color, 50%);
$headerbar_color: if($variant == 'light', lighten($bg_color, 5%), darken($bg_color, 3%));
$menu_color: if($variant == 'light', $base_color, mix($bg_color, $base_color, 20%));
$popover_bg_color: $bg_color;
$popover_hover_color: lighten($bg_color, 5%);

$scrollbar_bg_color: if($variant == 'light', mix($bg_color, $fg_color, 80%), mix($base_color, $bg_color, 50%));
$scrollbar_slider_color: mix($fg_color, $bg_color, 60%);
$scrollbar_slider_hover_color: mix($fg_color, $bg_color, 80%);
$scrollbar_slider_active_color: if($variant=='light', darken($selected_bg_color, 10%), lighten($selected_bg_color, 10%));

$warning_color: #f57900;
$error_color: #cc0000;
$success_color: if($variant == 'light', #73d216, darken(#73d216, 10%));
$destructive_color: if($variant == 'light', #ef2929, darken(#ef2929, 10%));

$osd_fg_color: #eeeeec;
$osd_text_color: white;
$osd_bg_color: transparentize(#1c1f20, 0.3);
$osd_insensitive_bg_color: transparentize(mix($osd_fg_color, opacify($osd_bg_color, 1), 10%), 0.5);
$osd_insensitive_fg_color: mix($osd_fg_color, opacify($osd_bg_color, 1), 50%);
$osd_borders_color: transparentize(black, 0.3);

$sidebar_bg_color: mix($bg_color, $base_color, 50%);
$base_hover_color: transparentize($fg_color, 0.95);

$tooltip_borders_color: transparentize(white, 0.9);
$shadow_color: transparentize(black, 0.9);

$drop_target_color: #4e9a06;

//insensitive state derived colors
$insensitive_fg_color: mix($fg_color, $bg_color, 50%);
$insensitive_bg_color: mix($bg_color, $base_color, 60%);
$insensitive_borders_color: $borders_color;

//colors for the backdrop state, derived from the main colors.
$backdrop_base_color: if($variant == 'light', darken(#ffffff, 1%), lighten(#ffffff, 1%));
$backdrop_text_color: mix(black, $backdrop_base_color, 80%);
$backdrop_bg_color: #e8e8e7;
$backdrop_fg_color: mix(#2e3436, $backdrop_bg_color, 50%);
$backdrop_insensitive_color: if($variant == 'light', darken($backdrop_bg_color, 15%), lighten($backdrop_bg_color, 15%));
$backdrop_selected_fg_color: if($variant == 'light', $backdrop_base_color, $backdrop_text_color);
$backdrop_borders_color: mix(#999, #e8e8e7, 80%);
$backdrop_dark_fill: mix($backdrop_borders_color, $backdrop_bg_color, 35%);
$backdrop_sidebar_bg_color: mix($backdrop_bg_color, $backdrop_base_color, 50%);

$backdrop_scrollbar_bg_color: darken($backdrop_bg_color, 3%);
$backdrop_scrollbar_slider_color: mix($backdrop_fg_color, $backdrop_bg_color, 40%);

$backdrop_menu_color: if($variant == 'light', $backdrop_base_color, mix($backdrop_bg_color, $backdrop_base_color, 20%));

@import 'drawing';


%titlebar,
headerbar {
  color: $fg_color;
  border-color: $alt_borders_color;

  @include headerbar_fill;

  &:backdrop {
    border-color: $backdrop_borders_color;
    background-color: $backdrop_bg_color;
    box-shadow: inset 0 1px $top_hilight;
  }

  /***********
   * Buttons *
   ***********/
  // stuff for .needs-attention
  $_dot_color: if($variant=='light', $selected_bg_color,
                                     lighten($selected_bg_color,15%));
  @keyframes needs_attention {
    from { background-image: radial-gradient(farthest-side, $_dot_color 0%, transparentize($_dot_color, 1) 0%); }
    to { background-image: radial-gradient(farthest-side, $_dot_color 95%, transparentize($_dot_color, 1)); }
  }

  %button,
  button {
    @at-root %button_basic, & {

      min-height: 24px;
      min-width: 16px;
      padding: 4px 8px;
      border: 1px solid;
      border-radius: 3px;
      transition: $button_transition;

      @include button(normal);

      &.flat {
        @include button(undecorated);
        // to avoid adiacent buttons borders clashing when transitioning, the transition on the normal state is set
        // to none, while it's added back in the hover state, so the button decoration will fade in on hover, but
        // it won't fade out when the pointer leave the button allocation area. To make the transition more evident
        // in this case the duration is increased.
        transition: none;

        &:hover {
          transition: $button_transition;
          transition-duration: 500ms;

          &:active { transition: $button_transition; }
        }
      }

      &:hover {
        @include button(hover);
        -gtk-icon-filter: brightness(1.2);
      }

      &:active,
      &:checked {
        @include button(active);

        transition-duration: 50ms;
      }

      &:backdrop {
        &.flat, & {
          @include button(backdrop);

          transition: $backdrop_transition;
          -gtk-icon-filter: none;

          &:active,
          &:checked {
            label, & { color: #999 }

            border-color: #aaa;
            $button_fill: image(#ccc);
            background-image: $button_fill;
          }

          &:disabled,  {
            background-color:$insensitive_borders_color;

            &:active,
            &:checked { background-color:$insensitive_borders_color; }
          }
        }
      }

      &.flat { &:backdrop, &:disabled, &:backdrop:disabled { @include button(undecorated); }}

      &:disabled {
        @include button(insensitive);

        &:active,
        &:checked { @include button(insensitive-active); }
      }

      &.image-button {
        min-width: 24px;
        padding-left: 4px;
        padding-right: 4px;
      }

      &.text-button {
        padding-left: 16px;
        padding-right: 16px;
      }

      &.text-button.image-button {
        padding-left: 8px;
        padding-right: 8px;

        label {
          padding-left: 8px;
          padding-right: 8px;
        }
      }

      &:drop(active) {
        color: $drop_target_color;
        border-color: $drop_target_color;
        box-shadow: inset 0 0 0 1px $drop_target_color;
      }
    }

    @at-root %button_selected, & {
      row:selected & {
        @if $variant == 'light' { border-color: $selected_borders_color; }

        &.flat:not(:active):not(:checked):not(:hover):not(disabled) {
          color: $selected_fg_color;
          border-color: transparent;

          &:backdrop { color: if($variant=='light', $backdrop_base_color, $backdrop_fg_color); }
        }
      }
    }


    // big standalone buttons like in Documents pager
    &.osd {
      min-width: 24px;
      min-height: 32px;

      &.image-button { min-width: 32px; }

      color: $osd_fg_color;
      border-radius: 5px;

      @include button(osd);

      border: none;
      box-shadow: none;

      &:hover {
        @include button(osd-hover);

        border: none;
        box-shadow: none;
      }

      &:active,
      &:checked {
        @include button(osd-active);

        border: none;
        box-shadow: none;
      }

      &:disabled {
        &:backdrop, & {
          @include button(osd-insensitive);

          border: none;
        }
      }

      &:backdrop {
        @include button(osd-backdrop);

        border: none;
      }
    }

    //overlay / OSD style
    @at-root %osd_button,
    .osd & {
      @include button(osd);

      &:hover { @include button(osd-hover); }

      &:active,
      &:checked { &:backdrop, & { @include button(osd-active); }}

      &:disabled { &:backdrop, & { @include button(osd-insensitive); }}

      &:backdrop { @include button(osd-backdrop); }

      &.flat {
        @include button(undecorated);

        box-shadow: none; //FIXME respect no edge on the button mixin
        text-shadow: 0 1px black;
        -gtk-icon-shadow: 0 1px black;

        &:hover { @include button(osd-hover); }

        &:disabled {
          @include button(osd-insensitive);
          background-image: none;
          border-color: transparent;
          box-shadow: none;
        }

        &:backdrop { @include button(undecorated); }

        &:active,
        &:checked { @include button(osd-active); }
      }
    }

    // Suggested and Destructive Action buttons
    @each $b_type, $b_color in (suggested-action, $selected_bg_color),
                               (destructive-action, $destructive_color) {
      &.#{$b_type} {
        @include button(normal, $b_color, white);

        &.flat {
          @include button(undecorated);

          color: $b_color; //FIXME: does it work on the dark variant?
        }

        &:hover { @include button(hover, $b_color, white); }

        &:active,
        &:checked { @include button(active, $b_color, white); }

        &:backdrop,
        &.flat:backdrop {
          @include button(backdrop, $b_color, white);

          &:active,
          &:checked { @include button(backdrop-active, $b_color, white); }

          &:disabled {
            @include button(backdrop-insensitive);

            &:active,
            &:checked { @include button(backdrop-insensitive-active, $b_color, white); }
          }
        }

        &.flat {
          &:backdrop, &:disabled, &:backdrop:disabled {
            @include button(undecorated);

            color: transparentize($b_color, 0.2);
          }
        }

        &:disabled {
          @include button(insensitive);

          &:active,
          &:checked { @include button(insensitive-active, $b_color, white); }
        }

        .osd & {
          @include button(osd, $b_color);

          &:hover { @include button(osd-hover, $b_color); }

          &:active,
          &:checked { &:backdrop, & { @include button(osd-active, $b_color); }}

          &:disabled { &:backdrop, & { @include button(osd-insensitive, $b_color); }}

          &:backdrop { @include button(osd-backdrop, $b_color); }
        }
      }
    }

    .stack-switcher > & {
      // to position the needs attention dot, padding is added to the button
      // child, a label needs just lateral padding while an icon needs vertical
      // padding added too.

      outline-offset: -3px; // needs to be set or it gets overriden by GtkRadioButton outline-offset

      > label {
        padding-left: 6px;  // label padding
        padding-right: 6px; //
      }

      > image {
        padding-left: 6px;   // image padding
        padding-right: 6px;  //
        padding-top: 3px;    //
        padding-bottom: 3px; //
      }

      &.text-button {
        // compensate text-button paddings
        padding-left: 10px;
        padding-right: 10px;
      }

      &.image-button {
        // we want image buttons to have a 1:1 aspect ratio, so compensation
        // of the padding added to the GtkImage is needed
        padding-left: 2px;
        padding-right: 2px;
      }

      &.needs-attention {
        > label,
        > image { @extend %needs_attention; }

        &:active,
        &:checked {
          > label,
          > image {
            animation: none;
            background-image: none;
          }
        }
      }
    }

    // hide separators
    &.font,
    &.file { separator { background-color: transparent; }}

    &.font { > box > box > label { font-weight: bold; }}

    // inline-toolbar buttons
    .inline-toolbar &, .inline-toolbar &:backdrop {
      border-radius: 2px;
      border-width: 1px;
      @extend %linked;
    }

    .primary-toolbar & { -gtk-icon-shadow: none; } // tango icons don't need shadows

    .linked > &,
    .linked > &:hover,
    .linked > &:active,
    .linked > &:checked,
    .linked > &:backdrop { @extend %linked; }

    .linked.vertical > &,
    .linked.vertical > &:hover,
    .linked.vertical > &:active,
    .linked.vertical > &:checked,
    .linked.vertical > &:backdrop { @extend %linked_vertical; }

    &.circular { // The Bloody Circul Button
      border-radius: 9999px;
      -gtk-outline-radius: 9999px;

      label { padding: 0; }

      // the followind code is needed since we use a darker bottom border on buttons, which looks pretty
      // bad with a 100% border radius (see https://bugzilla.gnome.org/show_bug.cgi?id=771205 for details),
      // so on relevant states we an additional background-image with a gradient clipped on the border-box,
      // so setting a transparent border would reveal it.
      // FIXME: take care of colored circular button.
      $_border_bg: linear-gradient(to top, $alt-borders-color 25%, $borders-color 50%);

      &:not(.flat):not(:checked):not(:active):not(:disabled):not(:backdrop) {
        @include button(normal);
        background-image: $button_fill, $_border_bg;
        border-color: transparent;
      }

      &:hover:not(:checked):not(:active):not(:disabled):not(:backdrop) {
        @include button(hover);
        background-image: $button_fill, $_border_bg;
        border-color: transparent;
      }

      background-origin: padding-box, border-box;
      background-clip: padding-box, border-box;
    }
  }

  %needs_attention {
    // the dot is drawn by using two radial gradient, the first one is the actuall dot, the other
    // simulates the shadow labels and icons normally have in buttons.
    animation: needs_attention 150ms ease-in;
    $_dot_shadow: _text_shadow_color(); // shadow color

    background-image: radial-gradient(farthest-side, $_dot_color 96%, transparentize($_dot_color,1 )),
                      radial-gradient(farthest-side, $_dot_shadow 95%, transparentize($_dot_shadow, 1));
    background-size: 6px 6px, 6px 6px;
    background-repeat: no-repeat;

    @if $variant == 'light' { background-position: right 3px, right 4px; }

    @else { background-position: right 3px, right 2px; }

    &:backdrop { background-size: 6px 6px, 0 0;}

    &:dir(rtl) {
      @if $variant == 'light' { background-position: left 3px, left 4px; }

      @else { background-position: left 3px, left 2px; }
    }
  }


  // all the following is for the +|- buttons on inline toolbars, that way
  // should really be deprecated...
  .inline-toolbar toolbutton > button { // redefining the button look is
                                        // needed since those are flat...
    @include button(normal);

    &:hover { @include button(hover); }

    &:active,
    &:checked{ @include button(active); }

    &:disabled {
      @include button(insensitive);

      &:active,
      &:checked { @include button(insensitive-active); }
    }

    &:backdrop {
      @include button(backdrop);

      &:active,
      &:checked { @include button(backdrop-active); }

      &:disabled {
        @include button(backdrop-insensitive);

        &:active,
        &:checked { @include button(backdrop-insensitive-active); }
      }
    }
  }

  // More inline toolbar buttons
  toolbar.inline-toolbar toolbutton,
  toolbar.inline-toolbar toolbutton:backdrop {
    > button.flat { @extend %linked_middle; }

    &:first-child > button.flat { @extend %linked:first-child; }

    &:last-child > button.flat { @extend %linked:last-child; }

    &:only-child > button.flat { @extend %linked:only-child; }
  }

  %linked_middle {
    border-radius: 0;
    border-right-style: none;
  }

  %linked {
    @extend %linked_middle;

    &:first-child {
      border-top-left-radius: 3px;
      border-bottom-left-radius: 3px;
    }

    &:last-child {
      border-top-right-radius: 3px;
      border-bottom-right-radius: 3px;
      border-right-style: solid;
    }

    &:only-child {
      border-radius: 3px;
      border-style: solid;
    }
  }

  %linked_vertical_middle {
    border-style: solid solid none solid;
    border-radius: 0;
  }

  %linked_vertical{
    @extend %linked_vertical_middle;

    &:first-child {
      border-top-left-radius: 3px;
      border-top-right-radius: 3px;
    }

    &:last-child {
      border-bottom-left-radius: 3px;
      border-bottom-right-radius: 3px;
      border-style: solid;
    }

    &:only-child {
      border-radius: 3px;
      border-style: solid;
    }
  }

  %undecorated_button {
    background-color: transparent;
    background-image: none;
    border-color: transparent;
    box-shadow: inset 0 1px transparentize(white, 1),
                0 1px transparentize(white, 1);
    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  /* menu buttons */
  modelbutton.flat,
  .menuitem.button.flat {
    min-height: 26px;
    padding-left: 5px;
    padding-right: 5px;
    border-radius: 3px;
    outline-offset: -2px;

    @extend %undecorated_button;

    &:hover { background-color: $popover_hover_color; }

    &:selected { @extend %selected_items; }

    &:backdrop,
    &:backdrop:hover { @extend %undecorated_button; }
  }

  modelbutton.flat arrow {
    background: none;

    &:hover { background: none; }

    &.left { -gtk-icon-source: -gtk-icontheme("pan-start-symbolic"); }

    &.right { -gtk-icon-source: -gtk-icontheme("pan-end-symbolic"); }
  }

  button.color {
    padding: 4px;

    colorswatch:only-child {
      &, overlay { border-radius: 0; }

      @if $variant == 'light' {
        box-shadow: 0 1px _text_shadow_color();

        .osd & { box-shadow: none; }
      }
    }

    @if $variant == 'light' {
      .osd &, & {
        &:disabled,
        &:backdrop,
        &:active,
        &:checked { colorswatch:only-child { box-shadow: none; }}
      }
    }
  }
}

.titlebar:not(headerbar) {
  > separator { background-color: $borders_color; }
}
